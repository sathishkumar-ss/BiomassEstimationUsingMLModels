// Defining Geometry
var geometry = 
    /* color: #d63000 */
    /* shown: false */
    /* displayProperties: [
      {
        "type": "rectangle"
      }
    ] */
 ee.Geometry.Polygon(
        [[[77.94829435816118, 10.225341011798053],
          [77.94829435816118, 10.14424192959202],
          [78.04717131128618, 10.14424192959202],
          [78.04717131128618, 10.225341011798053]]], null, false);
Map.centerObject(geometry);

// Selecting Datasets
var gedi = ee.ImageCollection('LARSE/GEDI/GEDI04_A_002_MONTHLY');
var s2 = ee.ImageCollection('COPERNICUS/S2_SR_HARMONIZED');
var glo30 = ee.ImageCollection('COPERNICUS/DEM/GLO30');

// Select a time-period
var startDate = ee.Date.fromYMD(2022, 1, 1);
var endDate = startDate.advance(1, 'year');

// Preparing Sentinel-2 composite
var filteredS2 = s2
  .filter(ee.Filter.date(startDate, endDate))
  .filter(ee.Filter.bounds(geometry));

var s2Projection = ee.Image(filteredS2.first()).select('B4').projection();

var scaleBands = function(image) {
  return image.multiply(0.0001)
    .copyProperties(image, ['system:time_start']);
};

var csPlus = ee.ImageCollection('GOOGLE/CLOUD_SCORE_PLUS/V1/S2_HARMONIZED');
var csPlusBands = csPlus.first().bandNames();

function maskLowQA(image) {
  var qaBand = 'cs';
  var clearThreshold = 0.5;
  var mask = image.select(qaBand).gte(clearThreshold);
  return image.updateMask(mask);
}

var addIndices = function(image) {
  var ndvi = image.normalizedDifference(['B8', 'B4']).rename('ndvi');
  var mndwi = image.normalizedDifference(['B3', 'B11']).rename('mndwi'); 
  var ndbi = image.normalizedDifference(['B11', 'B8']).rename('ndbi');
  var evi = image.expression(
    '2.5 * ((NIR - RED)/(NIR + 6*RED - 7.5*BLUE + 1))', {
      'NIR': image.select('B8'),
      'RED': image.select('B4'),
      'BLUE': image.select('B2')
    }).rename('evi');
  var bsi = image.expression(
      '(( X + Y ) - (A + B)) /(( X + Y ) + (A + B)) ', {
        'X': image.select('B11'),
        'Y': image.select('B4'),
        'A': image.select('B8'),
        'B': image.select('B2'),
    }).rename('bsi');
  return image
    .addBands(ndvi)
    .addBands(mndwi)
    .addBands(ndbi)
    .addBands(evi)
    .addBands(bsi);
};

var filteredS2WithCs = filteredS2.linkCollection(csPlus, csPlusBands);
var s2Processed = filteredS2WithCs
  .map(maskLowQA)
  .select('B.*')
  .map(scaleBands)
  .map(addIndices);

var s2Composite = s2Processed.median().setDefaultProjection(s2Projection).clip(geometry);

// Preparing GLO-30 slope and elevation
var glo30Filtered = glo30
  .filter(ee.Filter.bounds(geometry))
  .select('DEM');

var demProj = glo30Filtered.first().select(0).projection();

var elevation = glo30Filtered.mosaic().rename('dem').setDefaultProjection(demProj);
var slope = ee.Terrain.slope(elevation);
var demBands = elevation.addBands(slope);

// Preparing GEDI L4A Mosaic
var qualityMask = function(image) {
  return image.updateMask(image.select('l4_quality_flag').eq(1))
      .updateMask(image.select('degrade_flag').eq(0));
};

var errorMask = function(image) {
  var relative_se = image.select('agbd_se').divide(image.select('agbd'));
  return image.updateMask(relative_se.lte(0.5));
};

var slopeMask = function(image) {
  return image.updateMask(slope.lt(30));
};

var gediFiltered = gedi
  .filter(ee.Filter.date(startDate, endDate))
  .filter(ee.Filter.bounds(geometry));

var gediProjection = ee.Image(gediFiltered.first()).select('agbd').projection();

var gediProcessed = gediFiltered
  .map(qualityMask)
  .map(errorMask)
  .map(slopeMask);

var gediMosaic = gediProcessed.mosaic().select('agbd').setDefaultProjection(gediProjection);

// Visualizing Sentinel-2 Composite
var rgbVis = {
  min: 0.0, max: 0.3, gamma: 1.2,
  bands: ['B4', 'B3', 'B2'],
};
Map.addLayer(s2Composite.clip(geometry), rgbVis, 'Sentinel-2 Composite');

// Visualizing GEDI L4A (Filtered)
var gediVis = {
  min: 0,
  max: 200,
  palette: ['#edf8fb','#b2e2e2','#66c2a4','#2ca25f','#006d2c'],
  bands: ['agbd']
};
Map.addLayer(gediMosaic.clip(geometry), gediVis, 'GEDI L4A (Filtered)');

// Extracting Training Features
var gridScale = 100;
var gridProjection = ee.Projection('EPSG:3857').atScale(gridScale);

var stacked = s2Composite
  .addBands(demBands)
  .addBands(gediMosaic);

var stackedResampled = stacked
  .reduceResolution({
    reducer: ee.Reducer.mean(),
    maxPixels: 1024
  })
  .reproject({
    crs: gridProjection
});

var stackedResampled = stackedResampled
  .updateMask(stackedResampled.mask().gt(0));

var predictors = s2Composite.bandNames().cat(demBands.bandNames());
var predicted = gediMosaic.bandNames().get(0);

var predictorImage = stackedResampled.select(predictors);
var predictedImage = stackedResampled.select([predicted]);

var classMask = predictedImage.mask().toInt().rename('class');
// Define the number of samples for training and additional testing
var numSamplesTrain = 1200; // Number of samples for training
var numSamplesTest = 200; // Number of additional samples for testing

// Extract training data
var training = stackedResampled.addBands(classMask)
  .stratifiedSample({
    numPoints: numSamplesTrain,
    classBand: 'class',
    region: geometry,
    scale: gridScale,
    classValues: [0, 1],
    classPoints: [0, numSamplesTrain],  
    dropNulls: true,
    tileScale: 16,
    seed: 0 // Setting a seed for reproducibility
});

// Extract additional testing data
var testingAdditional = stackedResampled.addBands(classMask)
  .stratifiedSample({
    numPoints: numSamplesTest,
    classBand: 'class',
    region: geometry,
    scale: gridScale,
    classValues: [0, 1],
    classPoints: [0, numSamplesTest],  
    dropNulls: true,
    tileScale: 16,
    seed: 1 // Setting a different seed for additional testing data
});

// Print the size of training and additional testing datasets
print('Number of Features in Training Set:', training.size());
print('Number of Features in Additional Testing Set:', testingAdditional.size());
print('Sample Training Feature', training.first());

// Visualizing Resampled Sentinel-2
Map.addLayer(stackedResampled, rgbVis, 'Sentinel-2 (Resampled)');
Map.addLayer(stackedResampled, gediVis, 'GEDI L4A (Resampled)');
// Exporting Images to Google Drive

var imageWithDEMSlopeIndices = s2Composite
  .addBands([elevation,slope]);
var exportPath = 'data2';

// Define export parameters
var exportParams = {
  region: geometry,
  scale: 30,  // Set the desired scale for export (smaller size)
  maxPixels: 1e10
};

  // Replace with your desired band name
// Exporting Sentinel-2 Composite to Google Drive
Export.image.toDrive({
  image: imageWithDEMSlopeIndices.toFloat(),
  description: 'S2_imagee6',  // Customize filename
  folder: 'data2',  // Specify a folder in your Drive
  scale: 30,  // Adjust scale for reduced size (e.g., 30 meters)
  maxPixels: 1e8,  // Limit total pixels to avoid exceeding quotas
  fileFormat: 'GeoTIFF'  // Specify output format
});



// Export training features to Google Drive
Export.table.toDrive({
  collection: training,
  description: 'train_dataset',
  folder: 'data2', // Specify a folder in your Drive
  fileFormat: 'CSV' // Specify output format
});

// Export training features to Google Drive
Export.table.toDrive({
  collection: testingAdditional,
  description: 'Test_dataset',
  folder: 'data2', // Specify a folder in your Drive
  fileFormat: 'CSV' // Specify output format
});
